#include <Arduino.h>
#include "BluetoothSerial.h"
BluetoothSerial BT;
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>
#include <EEPROM.h>
int pinSensor = 14;
int pinSensor1 = 27;
int pinSensor2 = 13;
int pinSensor3 = 12;
int pinBuzzer = 2;  // Pin del buzzer
bool buzzerEN=1;
int interval = 100;
Adafruit_SH1106 myOLED(21, 22);
unsigned long tiempoInicio = 0;
unsigned long tiempoAnterior = 0;
static int contadorVueltas = 0;
bool condicionCumplida = false;  // Variable de bandera para controlar la ejecución
int rssi ;

String listo = "";
String INTERVAL = "";
String BUZEN = "";

#define EEPROM_SIZE 4
#define DEBUG(a) BT.println(a);

// 'LOGOBPM', 128x64px
const unsigned char barreraLOGOBPM[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x01, 0xf8, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfe, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1e, 0x0f, 0x8f, 0x00, 0x70, 0x03, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x07, 0x9e, 0x07, 0x00, 0x88, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0xbc, 0x03, 0x80, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xf8, 0x01, 0x80, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0xf0, 0x01, 0x80, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0xf0, 0x01, 0x80, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xf8, 0x01, 0x80, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0xfc, 0x03, 0x80, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x07, 0x9e, 0x03, 0x80, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x0f, 0x0f, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x07, 0xfe, 0x00, 0xc8, 0x04, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x01, 0xfc, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0xc7, 0x87, 0x8f, 0x3e, 0x3e, 0x78, 0x37, 0xe1, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x87, 0xcf, 0x9f, 0x7f, 0x7e, 0x7c, 0x37, 0xf3, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xc7, 0x48, 0x30, 0x41, 0x60, 0xf4, 0x34, 0x12, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x4f, 0x48, 0x30, 0x5f, 0x61, 0xf4, 0x34, 0x16, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x48, 0x48, 0x30, 0x60, 0x61, 0x84, 0x34, 0x12, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xcf, 0xc8, 0x30, 0x7c, 0x61, 0xfd, 0x34, 0x13, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0x87, 0x88, 0x10, 0x1c, 0x60, 0x79, 0x24, 0x11, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char btimages [] PROGMEM = {
0xff, 0xff, 0xf3, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x80, 0xff, 0xff, 0xf2, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xf2, 0x3f, 0xff, 0x80, 0xff, 0xfe, 
	0x73, 0x3f, 0xff, 0x80, 0xff, 0xff, 0x33, 0x3f, 0xff, 0x80, 0xff, 0xff, 0x92, 0x7f, 0xff, 0x80, 
	0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x80, 0xff, 0xff, 0xe3, 0xff, 
	0xff, 0x80, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x80, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0x92, 0x7f, 0xff, 0x80, 0xff, 0xff, 0x33, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x73, 0x3f, 0xff, 0x80, 
	0xff, 0xff, 0xf3, 0x3f, 0xff, 0x80, 0xff, 0xff, 0xf2, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0x80, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf3, 0xff, 0xff, 0x80
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int barreraallArray_LEN = 1;
const unsigned char* barreraallArray[1] = {
  barreraLOGOBPM
};
const int btallArray_LEN = 1;
const unsigned char* btallArray[1] = {
	btimages
};



void setup() {
  EEPROM.begin(200);
  EEPROM.get(0, buzzerEN);
  EEPROM.get(5, interval);
   EEPROM.get(10,pinSensor);
  myOLED.begin(SH1106_SWITCHCAPVCC, 0x3C);
  BT.begin("CRBarreraINO");
  myOLED.setTextColor(WHITE);
  myOLED.setTextSize(1);
  Serial.begin(115200);
  pinMode(pinSensor, INPUT);
  pinMode(pinSensor1, INPUT);
  pinMode(pinSensor2, INPUT);
  pinMode(pinSensor3, INPUT);

  pinMode(pinBuzzer, OUTPUT);
  // Configurar el pin del buzzer como salida
  digitalWrite(pinBuzzer, LOW);
  myOLED.drawBitmap(0, 0, barreraLOGOBPM, 128, 64,WHITE, BLACK);
  myOLED.display();
  delay(1000);
  myOLED.setCursor(22, 50);  // Ajusta la posición vertical
  myOLED.print("ESTOY LISTO!!!");
  myOLED.display();
// rssi=BT.getSignalStrength();


  while(digitalRead(pinSensor)==LOW){
    
  if (condicionCumplida==false) {  // Si la condición no se ha cumplido aún
if(BT.connected()){myOLED.drawBitmap(100, 0,btimages, 41, 21,BLACK,WHITE); myOLED.display();condicionCumplida = true;}}

  if (condicionCumplida==true) {  // Si la condición no se ha cumplido aún
if(!BT.connected()){myOLED.drawBitmap(100, 0,btimages, 41, 21,BLACK,BLACK); myOLED.display();condicionCumplida = false;}}



  if (BT.available()) {
    //BT.print("waiting..");
  
  myOLED.display();
    String data = BT.readStringUntil('\n');
    int conteo = data.length();
    data.remove(conteo - 1, 1);
    data.remove(0, 0);
    Serial.println(data);

    if (data == "show"||data == "help"||data == "ayuda") {
      BT.println("espere...");
      BT.print("BUZZER:"); BT.println(buzzerEN);
       BT.print("INTERVAL:");BT.println(interval);
       BT.print("SENSOR:");BT.println(pinSensor);
    } else

      if (data == "interval" || data == "INTERVAL") {
      BT.print("WRITE INTERVAL:");
      while (true) {
        if (BT.available()) {

   String data = BT.readStringUntil('\n');
    int conteo = data.length();
    data.remove(conteo - 1, 1);
    data.remove(0, 0);
    Serial.println(data);
      int temp = data.toInt(); 
          EEPROM.put(5,temp);
          EEPROM.commit();

          BT.print("INTERVAL changed to:");
          EEPROM.get(5, interval);
          BT.print(interval);
          break;
        }
      }
    }  //data if


    else

      if (data == "sensor" || data == "SENSOR") {
      BT.print("WRITE MAIN SENSOR:");
      while (true) {
        if (BT.available()) {

   String data = BT.readStringUntil('\n');
    int conteo = data.length();
    data.remove(conteo - 1, 1);
    data.remove(0, 0);
    Serial.println(data);
      int temp = data.toInt(); 
          EEPROM.put(10,temp);
          EEPROM.commit();

          BT.print("SENSOR changed to:");
          EEPROM.get(10,pinSensor);
          BT.print(pinSensor);
          break;
        }
      }
    }  //data if

    else

      if (data == "buzzer" || data == "BUZZER") {
      BT.print("ENABLE BUZZER:");
      while (true) {
        if (BT.available()) {

   String data = BT.readStringUntil('\n');
    int conteo = data.length();
    data.remove(conteo - 1, 1);
    data.remove(0, 0);
    Serial.println(data);
      int temp = data.toInt(); 
      if (temp == 0 || temp == 1) {
  // La condición se cumple cuando miValor es igual a 0 o 1
          EEPROM.put(0,temp);
          EEPROM.commit();
          BT.print("buzzer changed to:");
          EEPROM.get(0,buzzerEN);
          BT.print(buzzerEN);
          if (buzzerEN ==1){BT.println("ENABLE");}else BT.println("DISABLE");
          break;
} else {
  // La condición no se cumple cuando miValor es diferente de 0 y 1
  BT.print("value must be 0 or 1");
}
         
        }
      }
    } 


    else

      if (data == "reset") {
      BT.print("reset...");
      ESP.restart();
    }

    else

      if (data == "help") {
        BT.println("commands for change");
      BT.println("buzzer= 1 o 0");
      BT.println("sensors= (1 to 4)");
      BT.println("interval= (50 to 1000)ms");
    }

    else

      if (data == "ok" ||  data == "save" ) {
         BT.println("brake and exit");
       break;
    }




    //if bt available
  }
  }

}


void loop() {
  int estadoSensor = digitalRead(pinSensor);
  if (estadoSensor == LOW && tiempoInicio == 0) {
    tiempoInicio = millis();
    myOLED.clearDisplay();  // Borra la pantalla OLED después de 5 vueltas
    delay(interval);             // Pequeño retardo para estabilidad
  }

  if (estadoSensor == HIGH && tiempoInicio != 0) {
   delay(interval);
    tiempoAnterior = tiempoInicio;
    tiempoInicio = millis();
    unsigned long tiempoVuelta = tiempoInicio - tiempoAnterior;
    digitalWrite(pinBuzzer, buzzerEN);  // Activar el buzzer cuando se activa el sensor
    // Mostramos el tiempo de vuelta en una nueva línea en la pantalla OLED
    myOLED.setCursor(0, contadorVueltas * 10);  // Ajusta la posición vertical
    myOLED.print("Vuelta ");
    myOLED.print(contadorVueltas + 1);
    myOLED.print(": ");
    myOLED.print(formatoTiempoTranscurrido(tiempoVuelta));
    myOLED.display();

    Serial.print("Tiempo de vuelta ");
    Serial.print(contadorVueltas + 1);
    Serial.print(": ");
    Serial.println(formatoTiempoTranscurrido(tiempoVuelta));

    BT.print("Tiempo de vuelta ");
    BT.print(contadorVueltas + 1);
    BT.print(": ");
    BT.println(formatoTiempoTranscurrido(tiempoVuelta));

    contadorVueltas++;

    // Si se han completado 5 vueltas, reiniciamos el contador de vueltas
    if (contadorVueltas == 5) {
      contadorVueltas = 0;
      myOLED.clearDisplay();  // Borra la pantalla OLED después de 5 vueltas
    }

    digitalWrite(pinBuzzer, LOW);  // Apagar el buzzer cuando se suelta el sensor
  }
}

String formatoTiempoTranscurrido(unsigned long tiempoTranscurrido) {
  int minutos = tiempoTranscurrido / 60000;
  int segundos = (tiempoTranscurrido % 60000) / 1000;
  int milisegundos = (tiempoTranscurrido % 1000);

  String tiempoFormateado = "";
  tiempoFormateado += String(minutos) + "m ";
  tiempoFormateado += String(segundos) + "s ";
  tiempoFormateado += String(milisegundos) + "ms";

  return tiempoFormateado;
}
void writeString(char add, String data) {
  int _size = data.length();
  int i;
  for (i = 0; i < _size; i++) {
    EEPROM.write(add + i, data[i]);
  }
  EEPROM.write(add + _size, '\0');  //Add termination null character for String Data
  EEPROM.commit();
}


String read_String(char add) {
  int i;
  char data[200];  //Max 100 Bytes
  int len = 0;
  unsigned char k;
  k = EEPROM.read(add);
  while (k != '\0' && len < 500)  //Read until null character
  {
    k = EEPROM.read(add + len);
    data[len] = k;
    len++;
  }
  data[len] = '\0';
  return String(data);
}